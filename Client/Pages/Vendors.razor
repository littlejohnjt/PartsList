@page "/vendors"
@using PartsList.Client.Services;
@using PartsList.Shared.Models;
@using PartsList.Client.Components;
@inject VendorManager vendorManager;

<PageTitle>Vendors</PageTitle>

<div class="mb-3 ">
    <label class="form-label">Search by Vendor Name:</label>
    <input class="form-control" @bind="@searchName" style="width:30%" />
</div>
<div class="mb-3">
    <button class="btn btn-primary" @onclick="Search">Search</button>
    <button class="btn btn-primary" @onclick="ClearSearch">Clear</button>
</div>

<div class="mb-3">
    <select class="form-select" @onchange="VendorSelected" size="10" style="width:100%;">
        @foreach (var _vendor in vendors)
        {
            <option value="@_vendor.Id" style="margin-top: 10px; font-size:large;">@_vendor.Name</option>
        }
    </select>
</div>

<div>
    <button class="btn btn-primary" @onclick="AddVendor" disabled="@(DisableAddVendorButton())">Add Vendor</button>
    <button class="btn btn-primary" @onclick="UpdateVendor" disabled="@(DisableUpdateButton())">Update</button>
    <button class="btn btn-danger" @onclick="DeleteVendor" disabled="@(DisableDeleteButton())">Delete</button>
</div>

<div class="mb-3" style="margin-top:10px;">
    <AddEditVendor @ref="addEditVendorComponent" VendorsUpdatedCallback="VendorsUpdated" 
        errorMessage="errorMessage" />
</div>

<div class="mb-3">
    <label class="form-label" style="color:darkred; margin-top:10px;">@errorMessage</label>
</div>

@code {
    List<Vendor> vendors = new List<Vendor>();
    Vendor vendor = null;
    string searchName = "";
    string errorMessage = "";
    AddEditVendor addEditVendorComponent = new AddEditVendor();

    protected async Task DeleteVendor()
    {
        errorMessage = "";
        if (await vendorManager.Delete(vendor))
        {
            var deletedVendor = (from _vendor in vendors
                                 where _vendor.Id == vendor.Id
                                 select _vendor).FirstOrDefault();

            if (deletedVendor == null) return;

            var deletedVendorIndex = vendors.IndexOf(deletedVendor);
            vendors.RemoveAt(deletedVendorIndex);
            vendor = null;
        }
        else
        {
            errorMessage = $"Could not delete vendor {vendor.Name}";
        }
        await InvokeAsync(StateHasChanged);
    }

    protected async Task UpdateVendor()
    {
        if (addEditVendorComponent == null) return;

        addEditVendorComponent.isVisible = true;
        addEditVendorComponent.isInEditMode = true;
        addEditVendorComponent.vendors = vendors;
        addEditVendorComponent.vendor = vendor;
        addEditVendorComponent.Show();

        await InvokeAsync(StateHasChanged);
    }

    protected async Task Search()
    {
        errorMessage = "";
        var result = await vendorManager.GetByVendorName(searchName);

        if (result == null)
        {
            vendors = new List<Vendor>();
            errorMessage = $"No vendors match the search {searchName}.";
            return;
        }

        vendors = result.ToList<Vendor>();

        await InvokeAsync(StateHasChanged);
    }

    protected async Task ClearSearch()
    {
        searchName = "";
        await GetAllVendors();
    }

    protected async Task GetAllVendors()
    {
        errorMessage = "";

        try
        {
            var result = await vendorManager.GetAll();
            if (result == null)
            {
                errorMessage = "Error retrieving vendors";
                return;
            }

            vendors = result.ToList<Vendor>();
            vendor = null;
        }
        catch (Exception  ex)
        {
            errorMessage = ex.Message;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await GetAllVendors();
    }

    protected async Task AddVendor()
    {
        if (addEditVendorComponent == null) return;

        addEditVendorComponent.isVisible = true;
        addEditVendorComponent.isInEditMode = false;
        addEditVendorComponent.vendors = vendors;
        addEditVendorComponent.vendor = new Vendor();
        addEditVendorComponent.Show();

        await InvokeAsync(StateHasChanged);
    }

    protected async Task VendorSelected(ChangeEventArgs args)
    {
        var result = (from _vendor in vendors
                      where _vendor.Id == Convert.ToInt32(args.Value)
                      select _vendor).FirstOrDefault();

        if (result == null)
        {
            errorMessage = $"Could not retrieve vendor for Id = {args.Value}";
            return;
        }

        // Get the Customer via the API just to exercise all the methods:
        vendor = await vendorManager.GetById(result.Id);

        await InvokeAsync(StateHasChanged);
    }

    public async void VendorsUpdated()
    {
        await InvokeAsync(StateHasChanged);
    }

    protected bool DisableAddVendorButton()
    {
        return addEditVendorComponent.isVisible;
    }

    protected bool DisableUpdateButton()
    {
        return addEditVendorComponent.isVisible || vendor == null;
    }

    protected bool DisableDeleteButton()
    {
        return addEditVendorComponent.isVisible || vendor == null;
    }
}
