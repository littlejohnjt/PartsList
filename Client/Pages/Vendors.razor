@page "/vendors"
@using PartsList.Client.Services;
@using PartsList.Shared.Models;
@inject VendorManager vendorManager;

<PageTitle>Vendors</PageTitle>

@if (vendors != null && vendors.Any())
{
    <span>&nbsp;Search by Name:&nbsp;</span>
    <input @bind="@searchName" />
    <button @onclick="Search">Search</button>
    <br />
    <br />

    <button @onclick="GetAllVendors">Show All</button>
    <br />
    <br />
    <select @onchange="VendorSelected" size="10" style="width:100%;">
        @foreach (var _vendor in vendors)
        {
            <option value="@_vendor.Id">@_vendor.Name</option>
        }
    </select>
    <br />
    <br />
}
else
{
    <i>Loading verdors ...</i>
}

<button @onclick="AddVendor">Add Vendor</button>

@if (vendor != null)
{
    <span>&nbsp;Update Name:&nbsp;</span>
    <input @bind="@vendor.Name" />
    <button @onclick="UpdateVendor">Update</button>
    <br />
    <br />
    <button @onclick="DeleteVendor">Delete</button>

}
<br />
<span style="color:red;">@errorMessage</span>

@code {
    List<Vendor> vendors = new List<Vendor>();
    Vendor vendor = null;
    string searchName = "";
    string errorMessage = "";

    protected async Task DeleteVendor()
    {
        errorMessage = "";
        if (await vendorManager.Delete(vendor))
        {
            var deletedVendor = (from _vendor in vendors
                                 where _vendor.Id == vendor.Id
                                 select _vendor).FirstOrDefault();

            if (deletedVendor == null) return;

            var deletedVendorIndex = vendors.IndexOf(deletedVendor);
            vendors.RemoveAt(deletedVendorIndex);
            vendor = null;
        }
        else
        {
            errorMessage = $"Could not delete vendor {vendor.Name}";
        }
        await InvokeAsync(StateHasChanged);
    }

    protected async Task UpdateVendor()
    {
        errorMessage = "";
        var vendorToUpdate = (from _vendor in vendors
                              where _vendor.Id == vendor.Id
                              select _vendor).FirstOrDefault();

        if (vendorToUpdate == null) return;

        var updatedVendorIndex = vendors.IndexOf(vendorToUpdate);
        var updatedVendor = vendorManager.Update(vendorToUpdate);

        if (updatedVendor == null)
        {
            errorMessage = $"Error updating vendor {vendorToUpdate.Name}";
            return;
        }

        vendors[updatedVendorIndex] = updatedVendor.Result;
    }

    protected async Task Search()
    {
        errorMessage = "";
        var result = await vendorManager.GetByVendorName(searchName);

        if (result == null)
        {
            vendors = new List<Vendor>();
            errorMessage = $"No vendors match the search {searchName}.";
            return;
        }

        vendors = result.ToList<Vendor>();

        await InvokeAsync(StateHasChanged);
    }

    protected async Task GetAllVendors()
    {
        errorMessage = "";

        try
        {
            var result = await vendorManager.GetAll();
            if (result == null)
            {
                errorMessage = "Error retrieving vendors";
                return;
            }

            vendors = result.ToList<Vendor>();
            vendor = null;
        }
        catch (Exception  ex)
        {
            errorMessage = ex.Message;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await GetAllVendors();
    }

    protected async Task AddVendor()
    {
        errorMessage = "";
        var Vendor = new Vendor();
        var result = await vendorManager.Insert(Vendor);
        if (result != null)
        {
            vendors.Add(result);
            vendor = result;
        }
        else
        {
            errorMessage = "Could not add vendor";
        }
        await InvokeAsync(StateHasChanged);
    }

    protected async Task VendorSelected(ChangeEventArgs args)
    {
        var result = (from _vendor in vendors
                      where _vendor.Id == Convert.ToInt32(args.Value)
                      select _vendor).FirstOrDefault();

        if (result == null)
        {
            errorMessage = $"Could not retrieve vendor for Id = {args.Value}";
            return;
        }

        // Get the Customer via the API just to exercise all the methods:
        vendor = await vendorManager.GetById(result.Id);

        await InvokeAsync(StateHasChanged);
    }

}
